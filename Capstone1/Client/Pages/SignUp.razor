@page "/signup"
@inject ILanguageService LanguageService
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Register</PageTitle>

@if (authCheck)
{
	<h3>You can't register, you are already logged in!!!</h3>
}
else
{
	<div class="container">
		<div class="forms-container">
			<div class="form">
				<EditForm Model="user" OnValidSubmit="HandleRegistration">
					<DataAnnotationsValidator />
					<h2 class="title">Sign Up</h2>
					<div class="input-field">
						<i class="oi oi-person"></i>
						<input id="firstName" @bind-value="user.FirstName" placeholder="First Name" />
					</div>
					<ValidationMessage For="@(() => user.FirstName)" />
					<div class="input-field mb-3">
						<i class="oi oi-person"></i>
						<input id="lastName" @bind-value="user.LastName" placeholder="Last Name" />
					</div>
					<ValidationMessage For="@(() => user.LastName)" />
					<div class="mb-3">
						<label for="profilePic">Profile Picture</label>
						<img src="@ProfilePicDataUrl" style="width: 250px; height: 250px;" /> <br />
						<InputFile OnChange="@HandleFileSelected"></InputFile>
					</div>
					<hr />
					<div class="header">
						<div class="col">Language</div>
						<div class="col"></div>
					</div>
					@if(user.UserLanguages != null && user.UserLanguages.Count > 0)
					{
						@foreach (var userLanguage in user.UserLanguages)
						{
							<div class="row">
								<div class="col mb-3">
									<InputSelect @bind-Value="userLanguage.LanguageId" class="form-control">
										@foreach (var language in LanguageService.Languages)
										{
											<option value="@language.Id.ToString()">@language.Name</option>
										}
									</InputSelect>
								</div>
								<div class="col">
									<button type="button" class="btn btn-primary" @onclick="(() => RemoveLanguage(userLanguage.LanguageId))">
										<i class="oi oi-trash"></i>
									</button>
								</div>
							</div>
						}
					}
					<button type="button" class="btn btn-primary" @onclick="AddLanguage">
						<i class="oi oi-plus"></i> Add Language
					</button>
					<hr />
					<div class="mb-3">
						<label for="role">Role</label>
						<InputSelect @bind-Value="user.Role" class="form-control">
							@foreach (var role in roles)
							{
							<option value="@role.ToString()">@role</option>
							}
					</InputSelect>
					<ValidationMessage For="@(() => user.Role)" />
				</div>
				<div class="input-field mb-3">
					<i class="oi oi-inbox"></i>
					<input id="email" @bind-value="user.Email" placeholder="Email" />
				</div>
				<ValidationMessage For="@(() => user.Email)" />
				<div class="input-field mb-3">
					<i class="oi oi-lock-locked"></i>
					<input id="password" @bind-value="user.Password" placeholder="Password" type="password" />
				</div>
				<ValidationMessage For="@(() => user.Password)" />
				<div class="input-field mb-3">
					<i class="oi oi-lock-locked"></i>
					<input id="confirmPassword" @bind-value="user.ConfirmPassword" placeholder="Confirm Password" type="password" />
				</div>
				<ValidationMessage For="@(() => user.ConfirmPassword)" />
				<button type="submit" class="btn btn-primary">Register</button>
				<div class="@messageCssClass">
					<span>@message</span>
				</div>
				</EditForm>
			</div>
		</div>
	</div>
	<div class="blue-ball">
	</div>
	<div class="panels-container">
		<div class="right-panel">
			<img src="/css/undraw_online_learning_re_qw08.svg" class="image" alt="" style="width: 500px; height: 500px;" />
		</div>
	</div>
	<div class="easyLearn float-end">
        <a href="" style="display: block;">EasyLearn</a>
		<button @onclick="GoToLogin" class="btn transparent float-end mt-3" style="display: block;">
			Sign in
		</button>
    </div>
}


@code {
	UserRegister user = new UserRegister();
	UserLogin userLogin = new UserLogin();

	string message = string.Empty;
	string messageCssClass = string.Empty;
	bool authCheck = false;

	public string ProfilePicDataUrl { get; set; }

	List<string> roles = new List<string>
	{
		"Student",
		"Teacher"
	};

	protected override async Task OnInitializedAsync()
	{
		await LanguageService.GetLanguages();
		string authToken = await LocalStorage.GetItemAsStringAsync("authToken");
		if (!string.IsNullOrEmpty(authToken))
			authCheck = true;
	}

	async Task HandleRegistration()
	{
		try
		{
			userLogin.Email = user.Email;
			userLogin.Password = user.Password;
			var result = await AuthService.Register(user);
			message = result.Message;
			if (result.Success)
				messageCssClass = "text-success";
			else
				messageCssClass = "text-danger";


			var resultLogin = await AuthService.Login(userLogin);
			if (resultLogin.Success)
			{
				await LocalStorage.SetItemAsync("authToken", resultLogin.Data);
				await AuthenticationStateProvider.GetAuthenticationStateAsync();
			}

			if (result.Success && resultLogin.Success)
			{
				if (user.Role.Equals("Student"))
				{
					NavigationManager.NavigateTo("/profile/student/1");
				}
				else if (user.Role.Equals("Teacher"))
				{
					NavigationManager.NavigateTo("/profile/teacher/1");
				}
			}
		}
		catch
		{
			message = "You have selected the same language more than once.";
		}
	}

	async Task HandleFileSelected(InputFileChangeEventArgs inputFileChangeEvent)
	{
		var file = inputFileChangeEvent.File;
		string fileType = inputFileChangeEvent.File.ContentType;
		if (file != null)
		{
			var buffer = new byte[file.Size];
			await file.OpenReadStream(50999282).ReadAsync(buffer);

			ProfilePicDataUrl = $"data:{fileType};base64,{Convert.ToBase64String(buffer)}";
			user.ProfilePic = ProfilePicDataUrl;
		}
	}

	void RemoveLanguage(int languageId)
	{
		var language = user.UserLanguages.Find(l => l.LanguageId == languageId);
		if (language == null)
		{
			return;
		}

		user.UserLanguages.Remove(language);
	}

	void AddLanguage()
	{
		user.UserLanguages.Add(new UserLanguage { });
	}

	private void GoToLogin()
	{
		NavigationManager.NavigateTo("login");
	}
}
