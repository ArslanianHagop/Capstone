@page "/admin/interests"
@inject IInterestService InterestService
@attribute [Authorize(Roles = "Admin")]
@implements IDisposable

<PageTitle>Interests</PageTitle>

<h3>Interests</h3>

<div class="header">
	<div class="col">Name</div>
	<div class="col">Visible</div>
	<div class="col"></div>
</div>

@if(InterestService.AdminInterests != null && InterestService.AdminInterests.Count != 0)
{
	@foreach (var interest in InterestService.AdminInterests)
	{
		@if (interest.Editing)
		{
			<EditForm Model="editingInterest" OnSubmit="UpdateInterest">
				<div class="row">
					<div class="col">
						<InputText @bind-Value="editingInterest.Name" class="form-control"></InputText>
					</div>
					<div class="col col-visible">
						<InputCheckbox @bind-Value="editingInterest.Visible" style="transform: scale(1.5,1.5);"></InputCheckbox>
					</div>
					<div class="col">
						<button type="submit" class="btn btn-primary">
							<i class="oi oi-cloud-upload"></i>
						</button>
						<button class="btn btn-primary" @onclick="CancelEditing">
							<i class="oi oi-circle-x"></i>
						</button>
					</div>
				</div>
			</EditForm>
		}
		else
		{
			<div class="row">
				<div class="col">
					@interest.Name
				</div>
				<div class="col col-visible">
					<span>@(interest.Visible ? "✔️" : "")</span>
				</div>
				<div class="col">
					<button class="btn btn-primary" @onclick="(() => EditInterest(interest))">
						<i class="oi oi-pencil"></i>
					</button>
					<button class="btn btn-primary" @onclick="(() => DeleteInterest(interest.Id))">
						<i class="oi oi-trash"></i>
					</button>
				</div>
			</div>
		}
	}
}
<button class="btn btn-primary" @onclick="CreateNewInterest">
	<i class="oi oi-plus"></i> Add new Interest
</button>

@code {
	Interest editingInterest = null;

	protected override async Task OnInitializedAsync()
	{
		await InterestService.GetAdminInterests();
		InterestService.OnChange += StateHasChanged;
	}

	public void Dispose()
	{
		InterestService.OnChange -= StateHasChanged;
	}

	private void CreateNewInterest()
	{
		editingInterest = InterestService.CreateNewInterest();
	}

	private void EditInterest(Interest interest)
	{
		interest.Editing = true;
		editingInterest = interest;
	}

	private async Task UpdateInterest()
	{
		if (editingInterest.IsNew)
			await InterestService.AddInterest(editingInterest);
		else
			await InterestService.UpdateInterest(editingInterest);

		editingInterest = new Interest();
	}

	private async Task CancelEditing()
	{
		editingInterest = new Interest();
		await InterestService.GetAdminInterests();
	}

	private async Task DeleteInterest(int id)
	{
		await InterestService.DeleteInterest(id);
	}
}
